Search.setIndex({"docnames": ["_autosummary/functionfinder", "_autosummary/functionfinder.classes", "_autosummary/functionfinder.classes.idealdata", "_autosummary/functionfinder.classes.projectdata", "_autosummary/functionfinder.classes.testdata", "_autosummary/functionfinder.config", "_autosummary/functionfinder.config.error_calculation", "_autosummary/functionfinder.datafunctions", "_autosummary/functionfinder.datafunctions.calculate_best_ideal", "_autosummary/functionfinder.datafunctions.checktypes", "_autosummary/functionfinder.datafunctions.create_empty_sqlitedb", "_autosummary/functionfinder.datafunctions.csv2sql_directly", "_autosummary/functionfinder.datafunctions.csv2sql_pandas", "_autosummary/functionfinder.datafunctions.min_error", "_autosummary/functionfinder.exceptions", "_autosummary/functionfinder.exceptions.TypeError", "_autosummary/functionfinder.ffrunner", "_autosummary/functionfinder.ffrunner.task", "_autosummary/functionfinder.log", "_autosummary/functionfinder.log.setlogging", "_autosummary/functionfinder.setuplog", "_autosummary/functionfinder.setuplog.set_setuplogging", "_autosummary/tests", "_autosummary/tests.test_unit", "_autosummary/tests.test_unit.check_struct", "_autosummary/tests.test_unit.test_df", "_autosummary/tests.test_unit.test_sqlite", "index"], "filenames": ["_autosummary\\functionfinder.rst", "_autosummary\\functionfinder.classes.rst", "_autosummary\\functionfinder.classes.idealdata.rst", "_autosummary\\functionfinder.classes.projectdata.rst", "_autosummary\\functionfinder.classes.testdata.rst", "_autosummary\\functionfinder.config.rst", "_autosummary\\functionfinder.config.error_calculation.rst", "_autosummary\\functionfinder.datafunctions.rst", "_autosummary\\functionfinder.datafunctions.calculate_best_ideal.rst", "_autosummary\\functionfinder.datafunctions.checktypes.rst", "_autosummary\\functionfinder.datafunctions.create_empty_sqlitedb.rst", "_autosummary\\functionfinder.datafunctions.csv2sql_directly.rst", "_autosummary\\functionfinder.datafunctions.csv2sql_pandas.rst", "_autosummary\\functionfinder.datafunctions.min_error.rst", "_autosummary\\functionfinder.exceptions.rst", "_autosummary\\functionfinder.exceptions.TypeError.rst", "_autosummary\\functionfinder.ffrunner.rst", "_autosummary\\functionfinder.ffrunner.task.rst", "_autosummary\\functionfinder.log.rst", "_autosummary\\functionfinder.log.setlogging.rst", "_autosummary\\functionfinder.setuplog.rst", "_autosummary\\functionfinder.setuplog.set_setuplogging.rst", "_autosummary\\tests.rst", "_autosummary\\tests.test_unit.rst", "_autosummary\\tests.test_unit.check_struct.rst", "_autosummary\\tests.test_unit.test_df.rst", "_autosummary\\tests.test_unit.test_sqlite.rst", "index.rst"], "titles": ["functionfinder", "functionfinder.classes", "functionfinder.classes.idealdata", "functionfinder.classes.projectdata", "functionfinder.classes.testdata", "functionfinder.config", "functionfinder.config.error_calculation", "functionfinder.datafunctions", "functionfinder.datafunctions.calculate_best_ideal", "functionfinder.datafunctions.checktypes", "functionfinder.datafunctions.create_empty_sqlitedb", "functionfinder.datafunctions.csv2sql_directly", "functionfinder.datafunctions.csv2sql_pandas", "functionfinder.datafunctions.min_error", "functionfinder.exceptions", "functionfinder.exceptions.TypeError", "functionfinder.ffrunner", "functionfinder.ffrunner.task", "functionfinder.log", "functionfinder.log.setlogging", "functionfinder.setuplog", "functionfinder.setuplog.set_setuplogging", "tests", "tests.test_unit", "tests.test_unit.check_struct", "tests.test_unit.test_df", "tests.test_unit.test_sqlite", "DLMDWPMP01 Coding with Python - <strong>functionfinder</strong> documentation!"], "terms": {"modul": [0, 1, 14, 18, 20, 22, 26, 27], "definit": [1, 5, 7, 18, 20, 23], "object": [1, 3, 5, 9, 25, 26], "thi": [1, 2, 3, 4, 5, 7, 13, 14, 16, 18, 20, 23, 25, 26, 27], "defin": [1, 3, 18, 20], "three": 1, "us": [1, 7, 8, 11, 12, 17, 23, 25, 26, 27], "store": [1, 2, 3, 4], "data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 23, 25, 26, 27], "inform": [1, 25, 26], "The": [1, 2, 3, 4, 6, 8, 25, 26, 27], "latter": 1, "two": [1, 6, 8, 24, 25, 26], "ar": [1, 10, 12, 18, 20, 23, 25, 26], "subclass": [1, 2, 4, 25, 26], "first": [1, 12, 25, 26], "projectdata": [1, 2, 4], "datanam": [2, 3, 4], "train": [2, 3, 4, 5, 8, 13, 17, 25, 27], "ylabel": [2, 3, 4], "y": [2, 3, 4, 6, 8], "xlabel": [2, 3, 4], "x": [2, 3, 4, 8, 24], "plottitl": [2, 3, 4], "titl": [2, 3, 4], "plotfil": [2, 3, 4], "testplot": [2, 3, 4], "png": [2, 3, 4], "base": [2, 3, 4, 25, 26], "handl": [2, 3, 4, 7, 11, 12, 25, 26], "oper": [2, 3, 4, 23, 25, 26], "contain": [2, 3, 4, 5, 7, 8, 14, 16, 23, 25, 26], "recur": [2, 3, 4], "ideal": [2, 4, 5, 7, 8, 13, 17, 25, 27], "function": [2, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 20, 23, 25, 26, 27], "dataset": [2, 3, 4, 8, 13, 17, 25, 27], "As": [2, 4], "plu": [2, 4], "addition": [2, 4], "match": [2, 4, 5, 8, 13, 17, 25, 26, 27], "dictionari": [2, 5, 8, 9, 25, 26], "result": [2, 4, 8, 25, 26], "matched_funct": 2, "match_result": 2, "dict": 2, "assign": [2, 17, 27], "__init__": [2, 3, 4, 25, 26], "construct": [2, 3, 4], "string": [2, 3, 4, 9, 10, 11, 12, 13, 25, 26], "provid": [2, 3, 4, 5, 6, 23, 25, 26], "sqlite": [2, 3, 4, 7, 10, 11, 12, 23, 26], "tabl": [2, 3, 4, 11, 12], "name": [2, 3, 4, 5, 9, 10, 11, 12, 13, 24, 25, 26], "read": [2, 3, 4, 8, 12, 18, 20], "from": [2, 3, 4, 8, 18, 20, 25, 26, 27], "default": [2, 3, 4, 6, 8, 25, 26], "i": [2, 3, 4, 6, 8, 11, 12, 23, 24, 25, 26, 27], "option": [2, 3, 4, 8, 25, 26], "axi": [2, 3, 4], "plot": [2, 3, 4], "save": [2, 3, 4], "draw": [2, 3, 4], "file": [2, 3, 4, 5, 7, 8, 11, 12, 23, 26], "getdata": [2, 3, 4], "queri": [2, 3, 4], "databas": [2, 3, 4, 5, 7, 10, 11, 12, 26], "storag": 3, "necessari": 3, "given": [3, 5, 7, 8, 16, 17, 25, 26, 27], "type": [3, 9, 25, 26, 27], "_tabl": 3, "refer": [3, 25, 26], "_style": 3, "matplotlib": 3, "style": [3, 25, 26], "label": 3, "fname": 3, "_dbcon": 3, "locat": [3, 10, 11, 12], "panda": [3, 4, 5, 6, 7, 8, 12, 13, 24, 25, 26], "datafram": [3, 4, 6, 7, 8, 12, 13, 23, 24], "constructor": 3, "specifi": [3, 5, 10, 25, 26], "relev": 3, "test": [4, 5, 6, 8, 17, 27], "off": 4, "which": [4, 11, 12, 16, 25, 26], "exce": 4, "predefin": [4, 19, 21], "limit": [4, 8], "off_limit": 4, "entri": [4, 26], "exceed": [4, 8], "predifin": 4, "deviat": [4, 7, 8, 13], "user": [5, 18, 20], "configur": [5, 18, 20], "paramet": [5, 15, 18, 19, 20, 21, 25, 26], "script": [5, 7, 16, 18, 20, 23], "element": [5, 25, 26], "packag": [5, 7, 23, 27], "should": [5, 13, 25, 26], "adjust": 5, "your": [5, 27], "own": [5, 25, 26], "need": [5, 9, 23, 24, 25, 26], "befor": [5, 10, 25, 26], "run": [5, 16, 17, 25, 26], "program": [5, 9, 16, 18, 20, 26, 27], "It": 5, "variabl": [5, 18, 20], "output": [5, 10, 25, 26], "path": 5, "log": [5, 9, 20, 21, 25, 26], "requir": [5, 9], "check": [5, 9, 15, 23, 24, 25, 26], "setup": [5, 20, 21, 23, 25, 26], "datafil": 5, "kei": 5, "functiondefinit": 5, "errorcalcul": 5, "factor": 5, "modifi": [5, 6], "calcul": [5, 6, 8, 16, 17, 23, 25], "error": [5, 6, 7, 9, 13, 25, 26], "when": [5, 8, 25, 26], "evalu": [5, 8, 17, 27], "error_calcul": [5, 13], "trainvalu": [5, 6], "idealvalu": [5, 6], "rate": 5, "between": [5, 6, 13, 25, 26], "seri": [5, 6, 7, 13, 25], "same": [5, 6, 10, 25, 26], "length": [5, 6, 25, 26], "an": [6, 12, 25, 26], "valu": [6, 8, 17, 23, 25, 26, 27], "method": [6, 8, 13, 25, 26], "call": [6, 8, 9, 16, 23, 25, 26, 27], "datafunct": [6, 25, 26], "min_error": [6, 7], "can": [6, 16, 25, 26, 27], "differ": [6, 25, 26], "algorithm": 6, "specif": [6, 23, 25, 26], "column": [6, 7, 13, 24], "trainingdata": 6, "ha": [6, 9, 25, 26], "have": [6, 23, 25, 26], "idealdata": [6, 7, 8], "calcerror": 6, "float": [6, 8, 13], "By": 6, "sum": 6, "squar": 6, "sse": [6, 17, 27], "sum_": 6, "1": [6, 17, 25, 26, 27], "n": 6, "trainingdata_": 6, "idealfunction_": 6, "2": [6, 17, 27], "relat": 7, "create_empty_sqlitedb": 7, "dbname": [7, 10], "creat": [7, 10, 25, 26], "empti": [7, 10, 26], "csv2sql_directli": [7, 26], "existing_db": [7, 11, 12], "csv_toadd": [7, 11, 12], "tablenam": [7, 11, 12], "import": [7, 11, 12, 26], "csv": [7, 8, 11, 12, 26], "exist": [7, 10, 11, 12, 24, 26], "subprocess": [7, 11, 26], "csv2sql_panda": [7, 26], "train_set": [7, 13], "ideal_df": [7, 13], "select": [7, 8, 13], "minim": [7, 8, 13], "calculate_best_id": 7, "test_valu": [7, 8], "match_against": [7, 8], "index": [7, 8, 25, 26], "point": [7, 8], "built": 8, "min": 8, "list": [8, 25, 26], "current": 8, "row": 8, "includ": [8, 25, 26], "find": 8, "closest": 8, "posit": [8, 25, 26], "desir": 8, "filter": [8, 25, 26], "observ": 8, "lowest": 8, "pass": [8, 9, 23, 24, 26], "raw": 8, "all": [8, 24, 25, 26], "write": [8, 11, 12, 26], "line": [8, 25, 26], "logfil": 8, "certain": [8, 23, 24], "deltai": 8, "number": [8, 24, 25, 26], "idealfunkt": 8, "boolean": 8, "whether": [8, 25, 26], "upon": [8, 9], "functionnam": 9, "typedict": 9, "meet": 9, "case": [9, 25, 26], "accord": [9, 13], "datatyp": [9, 15, 25, 26], "format": [9, 25, 26], "rais": [9, 15, 25, 26], "failur": [9, 25, 26], "quit": 9, "hand": 10, "folder": 10, "config": [10, 11, 12, 18, 20], "py": [10, 11, 12, 23, 26], "delet": [10, 26], "creation": [10, 26], "direct": [11, 12], "enhanc": 11, "larg": [11, 26], "directori": [11, 12], "set": [11, 12, 17, 19, 21, 23, 25, 26, 27], "No": 12, "fed": 12, "against": 13, "last_val": 13, "tupel": 13, "userdefin": 14, "dure": [15, 23, 26], "main": [16, 18, 26, 27], "part": 16, "programm": 16, "orchestr": 16, "after": [16, 25, 26, 27], "instal": [16, 20, 27], "cli": [16, 27], "command": [16, 27], "ff": [16, 27], "task": [16, 27], "solv": [16, 17, 27], "those": [17, 26, 27], "criteria": [17, 24, 27], "minimum": [17, 27], "summedsquarederror": [17, 27], "precalcul": [17, 27], "squareroot": [17, 27], "basic": [18, 20, 23, 25, 26, 27], "process": [20, 21, 23, 26], "unittest": 23, "functionfind": 23, "been": [23, 25, 26], "written": 23, "due": [23, 26], "fact": 23, "author": 23, "meant": 23, "open": 23, "modif": 23, "therefor": [23, 26, 27], "cannot": 23, "test_sqlit": 23, "regard": [23, 25, 26], "test_df": 23, "properti": 23, "structur": [23, 24, 25], "check_struct": 23, "structdata": [23, 24], "class": [23, 25, 26], "least": 24, "abov": 24, "checkresult": 24, "bool": 24, "If": [24, 25, 26], "true": [24, 25, 26], "were": 24, "methodnam": [25, 26], "runtest": [25, 26], "testcas": [25, 26], "instanc": [25, 26], "execut": [25, 26], "valueerror": [25, 26], "doe": [25, 26], "attribut": [25, 26], "classmethod": [25, 26], "addclasscleanup": [25, 26], "arg": [25, 26], "kwarg": [25, 26], "addcleanup": [25, 26], "except": [25, 26], "cleanup": [25, 26], "item": [25, 26], "even": [25, 26], "setupclass": [25, 26], "fail": [25, 26], "unlik": [25, 26], "teardownclass": [25, 26], "add": [25, 26], "argument": [25, 26], "complet": [25, 26, 27], "ad": [25, 26], "lifo": [25, 26], "basi": [25, 26], "teardown": [25, 26], "success": [25, 26], "addtypeequalityfunc": [25, 26], "typeobj": [25, 26], "assertequ": [25, 26], "compar": [25, 26], "regist": [25, 26], "equal": [25, 26], "nicer": [25, 26], "messag": [25, 26], "both": [25, 26], "callabl": [25, 26], "take": [25, 26], "msg": [25, 26], "self": [25, 26], "failureexcept": [25, 26], "assertalmostequ": [25, 26], "second": [25, 26], "place": [25, 26], "none": [25, 26], "delta": [25, 26], "unequ": [25, 26], "determin": [25, 26], "round": [25, 26], "decim": [25, 26], "7": [25, 26], "zero": [25, 26], "more": [25, 26], "than": [25, 26], "note": [25, 26], "usual": [25, 26], "signific": [25, 26], "digit": [25, 26], "measur": [25, 26], "most": [25, 26], "thei": [25, 26], "automat": [25, 26, 27], "almost": [25, 26], "assertcountequ": [25, 26], "assert": [25, 26], "iter": [25, 26], "time": [25, 26], "without": [25, 26], "order": [25, 26], "counter": [25, 26], "exampl": [25, 26], "0": [25, 26], "assertdictcontainssubset": [25, 26], "subset": [25, 26], "superset": [25, 26], "assertfals": [25, 26], "expr": [25, 26], "express": [25, 26], "fals": [25, 26], "assertgreat": [25, 26], "b": [25, 26], "just": [25, 26], "like": [25, 26], "asserttru": [25, 26], "assertgreaterequ": [25, 26], "assertin": [25, 26], "member": [25, 26], "asserti": [25, 26], "expr1": [25, 26], "expr2": [25, 26], "assertisinst": [25, 26], "obj": [25, 26], "cl": [25, 26], "isinst": [25, 26], "assertisnon": [25, 26], "assertisnot": [25, 26], "assertisnotnon": [25, 26], "symmetri": [25, 26], "assertless": [25, 26], "assertlessequ": [25, 26], "assertlistequ": [25, 26], "list1": [25, 26], "list2": [25, 26], "A": [25, 26], "instead": [25, 26], "assertlog": [25, 26], "logger": [25, 26], "level": [25, 26], "unless": [25, 26], "higher": [25, 26], "emit": [25, 26], "logger_nam": [25, 26], "its": [25, 26], "children": [25, 26], "omit": [25, 26], "info": [25, 26], "root": [25, 26], "must": [25, 26], "context": [25, 26], "manag": [25, 26], "yield": [25, 26], "record": [25, 26], "At": [25, 26], "end": [25, 26], "correspond": [25, 26], "logrecord": [25, 26], "foo": [25, 26], "cm": [25, 26], "getlogg": [25, 26], "bar": [25, 26], "assertmultilineequ": [25, 26], "multi": [25, 26], "assertnolog": [25, 26], "assertnotalmostequ": [25, 26], "less": [25, 26], "assertnotequ": [25, 26], "assertnotin": [25, 26], "assertnotisinst": [25, 26], "assertnotregex": [25, 26], "text": [25, 26], "unexpected_regex": [25, 26], "regular": [25, 26], "assertrais": [25, 26], "expected_except": [25, 26], "invok": [25, 26], "keyword": [25, 26], "caught": [25, 26], "deem": [25, 26], "suffer": [25, 26], "exactli": [25, 26], "unexpect": [25, 26], "return": [25, 26], "someexcept": [25, 26], "do_someth": [25, 26], "keep": [25, 26], "allow": [25, 26], "you": [25, 26], "inspect": [25, 26], "the_except": [25, 26], "error_cod": [25, 26], "3": [25, 26], "assertraisesregex": [25, 26], "expected_regex": [25, 26], "regex": [25, 26], "expect": [25, 26], "re": [25, 26], "pattern": [25, 26], "found": [25, 26], "extra": [25, 26], "onli": [25, 26], "assertregex": [25, 26], "assertsequenceequ": [25, 26], "seq1": [25, 26], "seq2": [25, 26], "seq_typ": [25, 26], "sequenc": [25, 26], "tupl": [25, 26], "For": [25, 26], "purpos": [25, 26], "valid": [25, 26], "one": [25, 26], "enforc": [25, 26], "assertsetequ": [25, 26], "set1": [25, 26], "set2": [25, 26], "ducktyp": [25, 26], "support": [25, 26], "optim": [25, 26], "asserttupleequ": [25, 26], "tuple1": [25, 26], "tuple2": [25, 26], "assertwarn": [25, 26], "expected_warn": [25, 26], "warn": [25, 26], "warnclass": [25, 26], "trigger": [25, 26], "depend": [25, 26], "other": [25, 26], "rule": [25, 26], "effect": [25, 26], "might": [25, 26], "silenc": [25, 26], "print": [25, 26], "out": [25, 26], "somewarn": [25, 26], "similarli": [25, 26], "filenam": [25, 26], "lineno": [25, 26], "give": [25, 26], "about": [25, 26], "python": [25, 26], "code": [25, 26], "wa": [25, 26, 27], "the_warn": [25, 26], "some_attribut": [25, 26], "147": [25, 26], "assertwarnsregex": [25, 26], "regexp": [25, 26], "similar": [25, 26], "addit": [25, 26], "whose": [25, 26], "also": [25, 26], "consid": [25, 26], "debug": [25, 26], "collect": [25, 26], "testresult": [25, 26], "doclasscleanup": [25, 26], "normal": [25, 26], "docleanup": [25, 26], "enterclasscontext": [25, 26], "entercontext": [25, 26], "wide": [25, 26], "enter": [25, 26], "suppli": [25, 26], "__exit__": [25, 26], "__enter__": [25, 26], "immedi": [25, 26], "alia": [25, 26], "assertionerror": [25, 26], "everytim": [25, 26], "shortdescript": [25, 26], "descript": [25, 26], "implement": [25, 26], "": [25, 26], "docstr": [25, 26, 27], "skiptest": [25, 26], "reason": [25, 26], "skip": [25, 26], "subtest": [25, 26], "param": [25, 26], "enclos": [25, 26], "block": [25, 26], "identifi": [25, 26], "mark": [25, 26], "resum": [25, 26], "further": [25, 26], "test_idealstruct": 25, "test_instancecheck": 25, "checktyp": 25, "test_teststruct": 25, "test_trainideal_length": 25, "conduct": 25, "math": 25, "test_trainstruct": 25, "try": 26, "possibl": 26, "accept": 26, "neg": 26, "test_creat": 26, "test_table_from_csv": 26, "insid": 26, "expectedfailur": 26, "decor": 26, "In": 26, "get": 26, "would": 26, "suggest": 26, "system": 26, "abl": 26, "extrem": 26, "directli": 26, "test_table_from_panda": 26, "effort": 27, "gain": 27, "skill": 27, "simpl": 27, "classif": 27, "design": 27, "fulfil": 27, "iu": 27, "pip": 27, "e": 27, "consol": 27, "gener": 27, "sphinx": 27, "follow": 27}, "objects": {"": [[0, 0, 0, "-", "functionfinder"], [22, 0, 0, "-", "tests"]], "functionfinder": [[1, 0, 0, "-", "classes"], [5, 0, 0, "-", "config"], [7, 0, 0, "-", "datafunctions"], [14, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "ffrunner"], [18, 0, 0, "-", "log"], [20, 0, 0, "-", "setuplog"]], "functionfinder.classes": [[2, 1, 1, "", "idealdata"], [3, 1, 1, "", "projectdata"], [4, 1, 1, "", "testdata"]], "functionfinder.classes.idealdata": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "draw"], [2, 2, 1, "", "getdata"], [2, 2, 1, "", "matched_functions"]], "functionfinder.classes.projectdata": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "draw"], [3, 2, 1, "", "getdata"]], "functionfinder.classes.testdata": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "draw"], [4, 2, 1, "", "getdata"], [4, 2, 1, "", "off_limit"]], "functionfinder.config": [[6, 3, 1, "", "error_calculation"]], "functionfinder.datafunctions": [[8, 3, 1, "", "calculate_best_ideal"], [9, 3, 1, "", "checktypes"], [10, 3, 1, "", "create_empty_sqlitedb"], [11, 3, 1, "", "csv2sql_directly"], [12, 3, 1, "", "csv2sql_pandas"], [13, 3, 1, "", "min_error"]], "functionfinder.exceptions": [[15, 4, 1, "", "TypeError"]], "functionfinder.ffrunner": [[17, 3, 1, "", "task"]], "functionfinder.log": [[19, 3, 1, "", "setlogging"]], "functionfinder.setuplog": [[21, 3, 1, "", "set_setuplogging"]], "tests": [[23, 0, 0, "-", "test_unit"]], "tests.test_unit": [[24, 3, 1, "", "check_struct"], [25, 1, 1, "", "test_df"], [26, 1, 1, "", "test_sqlite"]], "tests.test_unit.test_df": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "addClassCleanup"], [25, 2, 1, "", "addCleanup"], [25, 2, 1, "", "addTypeEqualityFunc"], [25, 2, 1, "", "assertAlmostEqual"], [25, 2, 1, "", "assertCountEqual"], [25, 2, 1, "", "assertDictContainsSubset"], [25, 2, 1, "", "assertEqual"], [25, 2, 1, "", "assertFalse"], [25, 2, 1, "", "assertGreater"], [25, 2, 1, "", "assertGreaterEqual"], [25, 2, 1, "", "assertIn"], [25, 2, 1, "", "assertIs"], [25, 2, 1, "", "assertIsInstance"], [25, 2, 1, "", "assertIsNone"], [25, 2, 1, "", "assertIsNot"], [25, 2, 1, "", "assertIsNotNone"], [25, 2, 1, "", "assertLess"], [25, 2, 1, "", "assertLessEqual"], [25, 2, 1, "", "assertListEqual"], [25, 2, 1, "", "assertLogs"], [25, 2, 1, "", "assertMultiLineEqual"], [25, 2, 1, "", "assertNoLogs"], [25, 2, 1, "", "assertNotAlmostEqual"], [25, 2, 1, "", "assertNotEqual"], [25, 2, 1, "", "assertNotIn"], [25, 2, 1, "", "assertNotIsInstance"], [25, 2, 1, "", "assertNotRegex"], [25, 2, 1, "", "assertRaises"], [25, 2, 1, "", "assertRaisesRegex"], [25, 2, 1, "", "assertRegex"], [25, 2, 1, "", "assertSequenceEqual"], [25, 2, 1, "", "assertSetEqual"], [25, 2, 1, "", "assertTrue"], [25, 2, 1, "", "assertTupleEqual"], [25, 2, 1, "", "assertWarns"], [25, 2, 1, "", "assertWarnsRegex"], [25, 2, 1, "", "debug"], [25, 2, 1, "", "doClassCleanups"], [25, 2, 1, "", "doCleanups"], [25, 2, 1, "", "enterClassContext"], [25, 2, 1, "", "enterContext"], [25, 2, 1, "", "fail"], [25, 5, 1, "", "failureException"], [25, 2, 1, "", "setUp"], [25, 2, 1, "", "setUpClass"], [25, 2, 1, "", "shortDescription"], [25, 2, 1, "", "skipTest"], [25, 2, 1, "", "subTest"], [25, 2, 1, "", "tearDown"], [25, 2, 1, "", "tearDownClass"], [25, 2, 1, "", "test_idealstruct"], [25, 2, 1, "", "test_instancecheck"], [25, 2, 1, "", "test_teststruct"], [25, 2, 1, "", "test_trainideal_length"], [25, 2, 1, "", "test_trainstruct"]], "tests.test_unit.test_sqlite": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "addClassCleanup"], [26, 2, 1, "", "addCleanup"], [26, 2, 1, "", "addTypeEqualityFunc"], [26, 2, 1, "", "assertAlmostEqual"], [26, 2, 1, "", "assertCountEqual"], [26, 2, 1, "", "assertDictContainsSubset"], [26, 2, 1, "", "assertEqual"], [26, 2, 1, "", "assertFalse"], [26, 2, 1, "", "assertGreater"], [26, 2, 1, "", "assertGreaterEqual"], [26, 2, 1, "", "assertIn"], [26, 2, 1, "", "assertIs"], [26, 2, 1, "", "assertIsInstance"], [26, 2, 1, "", "assertIsNone"], [26, 2, 1, "", "assertIsNot"], [26, 2, 1, "", "assertIsNotNone"], [26, 2, 1, "", "assertLess"], [26, 2, 1, "", "assertLessEqual"], [26, 2, 1, "", "assertListEqual"], [26, 2, 1, "", "assertLogs"], [26, 2, 1, "", "assertMultiLineEqual"], [26, 2, 1, "", "assertNoLogs"], [26, 2, 1, "", "assertNotAlmostEqual"], [26, 2, 1, "", "assertNotEqual"], [26, 2, 1, "", "assertNotIn"], [26, 2, 1, "", "assertNotIsInstance"], [26, 2, 1, "", "assertNotRegex"], [26, 2, 1, "", "assertRaises"], [26, 2, 1, "", "assertRaisesRegex"], [26, 2, 1, "", "assertRegex"], [26, 2, 1, "", "assertSequenceEqual"], [26, 2, 1, "", "assertSetEqual"], [26, 2, 1, "", "assertTrue"], [26, 2, 1, "", "assertTupleEqual"], [26, 2, 1, "", "assertWarns"], [26, 2, 1, "", "assertWarnsRegex"], [26, 2, 1, "", "debug"], [26, 2, 1, "", "doClassCleanups"], [26, 2, 1, "", "doCleanups"], [26, 2, 1, "", "enterClassContext"], [26, 2, 1, "", "enterContext"], [26, 2, 1, "", "fail"], [26, 5, 1, "", "failureException"], [26, 2, 1, "", "setUp"], [26, 2, 1, "", "setUpClass"], [26, 2, 1, "", "shortDescription"], [26, 2, 1, "", "skipTest"], [26, 2, 1, "", "subTest"], [26, 2, 1, "", "tearDown"], [26, 2, 1, "", "tearDownClass"], [26, 2, 1, "", "test_creation"], [26, 2, 1, "", "test_table_from_csv"], [26, 2, 1, "", "test_table_from_pandas"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"functionfind": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27], "class": [1, 2, 3, 4], "idealdata": 2, "attribut": [2, 3, 4], "method": [2, 3, 4, 5, 7, 16, 23], "paramet": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 24], "projectdata": 3, "testdata": 4, "config": [5, 6], "error_calcul": 6, "return": [6, 8, 9, 13, 24], "note": [6, 23], "datafunct": [7, 8, 9, 10, 11, 12, 13], "calculate_best_id": 8, "checktyp": 9, "create_empty_sqlitedb": 10, "csv2sql_directli": 11, "csv2sql_panda": 12, "min_error": 13, "except": [14, 15], "typeerror": 15, "ffrunner": [16, 17], "task": 17, "log": [18, 19], "setlog": 19, "setuplog": [20, 21], "set_setuplog": 21, "test": [22, 23, 24, 25, 26], "test_unit": [23, 24, 25, 26], "testset": 23, "check_struct": 24, "test_df": 25, "test_sqlit": 26, "dlmdwpmp01": 27, "code": 27, "python": 27, "document": 27}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"functionfinder": [[0, "module-functionfinder"]], "functionfinder.classes": [[1, "module-functionfinder.classes"]], "functionfinder.classes.idealdata": [[2, "functionfinder-classes-idealdata"]], "Attributes": [[2, "attributes"], [3, "attributes"], [4, "attributes"]], "Methods": [[2, "methods"], [3, "methods"], [4, "methods"], [5, "methods"], [7, "methods"], [16, "methods"], [23, "methods"]], "Parameters": [[2, "parameters"], [2, "id1"], [3, "parameters"], [4, "parameters"], [6, "parameters"], [8, "parameters"], [9, "parameters"], [10, "parameters"], [11, "parameters"], [12, "parameters"], [13, "parameters"], [24, "parameters"]], "functionfinder.classes.projectdata": [[3, "functionfinder-classes-projectdata"]], "functionfinder.classes.testdata": [[4, "functionfinder-classes-testdata"]], "functionfinder.config": [[5, "module-functionfinder.config"]], "functionfinder.config.error_calculation": [[6, "functionfinder-config-error-calculation"]], "Returns": [[6, "returns"], [8, "returns"], [9, "returns"], [13, "returns"], [24, "returns"]], "Notes": [[6, "notes"], [23, "notes"]], "functionfinder.datafunctions": [[7, "module-functionfinder.datafunctions"]], "functionfinder.datafunctions.calculate_best_ideal": [[8, "functionfinder-datafunctions-calculate-best-ideal"]], "functionfinder.datafunctions.checktypes": [[9, "functionfinder-datafunctions-checktypes"]], "functionfinder.datafunctions.create_empty_sqlitedb": [[10, "functionfinder-datafunctions-create-empty-sqlitedb"]], "functionfinder.datafunctions.csv2sql_directly": [[11, "functionfinder-datafunctions-csv2sql-directly"]], "functionfinder.datafunctions.csv2sql_pandas": [[12, "functionfinder-datafunctions-csv2sql-pandas"]], "functionfinder.datafunctions.min_error": [[13, "functionfinder-datafunctions-min-error"]], "functionfinder.exceptions": [[14, "module-functionfinder.exceptions"]], "functionfinder.exceptions.TypeError": [[15, "functionfinder-exceptions-typeerror"]], "functionfinder.ffrunner": [[16, "module-functionfinder.ffrunner"]], "functionfinder.ffrunner.task": [[17, "functionfinder-ffrunner-task"]], "functionfinder.log": [[18, "module-functionfinder.log"]], "functionfinder.log.setlogging": [[19, "functionfinder-log-setlogging"]], "functionfinder.setuplog": [[20, "module-functionfinder.setuplog"]], "functionfinder.setuplog.set_setuplogging": [[21, "functionfinder-setuplog-set-setuplogging"]], "tests": [[22, "module-tests"]], "tests.test_unit": [[23, "module-tests.test_unit"]], "TestSets": [[23, "testsets"]], "tests.test_unit.check_struct": [[24, "tests-test-unit-check-struct"]], "tests.test_unit.test_df": [[25, "tests-test-unit-test-df"]], "tests.test_unit.test_sqlite": [[26, "tests-test-unit-test-sqlite"]], "DLMDWPMP01 Coding with Python - functionfinder documentation!": [[27, "dlmdwpmp01-coding-with-python-functionfinder-documentation"]]}, "indexentries": {"functionfinder": [[0, "module-functionfinder"]], "module": [[0, "module-functionfinder"], [1, "module-functionfinder.classes"], [5, "module-functionfinder.config"], [7, "module-functionfinder.datafunctions"], [14, "module-functionfinder.exceptions"], [16, "module-functionfinder.ffrunner"], [18, "module-functionfinder.log"], [20, "module-functionfinder.setuplog"], [22, "module-tests"], [23, "module-tests.test_unit"]], "functionfinder.classes": [[1, "module-functionfinder.classes"]], "__init__() (functionfinder.classes.idealdata method)": [[2, "functionfinder.classes.idealdata.__init__"]], "draw() (functionfinder.classes.idealdata method)": [[2, "functionfinder.classes.idealdata.draw"]], "getdata() (functionfinder.classes.idealdata method)": [[2, "functionfinder.classes.idealdata.getdata"]], "idealdata (class in functionfinder.classes)": [[2, "functionfinder.classes.idealdata"]], "matched_functions() (functionfinder.classes.idealdata method)": [[2, "functionfinder.classes.idealdata.matched_functions"]], "__init__() (functionfinder.classes.projectdata method)": [[3, "functionfinder.classes.projectdata.__init__"]], "draw() (functionfinder.classes.projectdata method)": [[3, "functionfinder.classes.projectdata.draw"]], "getdata() (functionfinder.classes.projectdata method)": [[3, "functionfinder.classes.projectdata.getdata"]], "projectdata (class in functionfinder.classes)": [[3, "functionfinder.classes.projectdata"]], "__init__() (functionfinder.classes.testdata method)": [[4, "functionfinder.classes.testdata.__init__"]], "draw() (functionfinder.classes.testdata method)": [[4, "functionfinder.classes.testdata.draw"]], "getdata() (functionfinder.classes.testdata method)": [[4, "functionfinder.classes.testdata.getdata"]], "off_limit() (functionfinder.classes.testdata method)": [[4, "functionfinder.classes.testdata.off_limit"]], "testdata (class in functionfinder.classes)": [[4, "functionfinder.classes.testdata"]], "functionfinder.config": [[5, "module-functionfinder.config"]], "error_calculation() (in module functionfinder.config)": [[6, "functionfinder.config.error_calculation"]], "functionfinder.datafunctions": [[7, "module-functionfinder.datafunctions"]], "calculate_best_ideal() (in module functionfinder.datafunctions)": [[8, "functionfinder.datafunctions.calculate_best_ideal"]], "checktypes() (in module functionfinder.datafunctions)": [[9, "functionfinder.datafunctions.checktypes"]], "create_empty_sqlitedb() (in module functionfinder.datafunctions)": [[10, "functionfinder.datafunctions.create_empty_sqlitedb"]], "csv2sql_directly() (in module functionfinder.datafunctions)": [[11, "functionfinder.datafunctions.csv2sql_directly"]], "csv2sql_pandas() (in module functionfinder.datafunctions)": [[12, "functionfinder.datafunctions.csv2sql_pandas"]], "min_error() (in module functionfinder.datafunctions)": [[13, "functionfinder.datafunctions.min_error"]], "functionfinder.exceptions": [[14, "module-functionfinder.exceptions"]], "typeerror": [[15, "functionfinder.exceptions.TypeError"]], "functionfinder.ffrunner": [[16, "module-functionfinder.ffrunner"]], "task() (in module functionfinder.ffrunner)": [[17, "functionfinder.ffrunner.task"]], "functionfinder.log": [[18, "module-functionfinder.log"]], "setlogging() (in module functionfinder.log)": [[19, "functionfinder.log.setlogging"]], "functionfinder.setuplog": [[20, "module-functionfinder.setuplog"]], "set_setuplogging() (in module functionfinder.setuplog)": [[21, "functionfinder.setuplog.set_setuplogging"]], "tests": [[22, "module-tests"]], "tests.test_unit": [[23, "module-tests.test_unit"]], "check_struct() (in module tests.test_unit)": [[24, "tests.test_unit.check_struct"]], "__init__() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.__init__"]], "addclasscleanup() (tests.test_unit.test_df class method)": [[25, "tests.test_unit.test_df.addClassCleanup"]], "addcleanup() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.addCleanup"]], "addtypeequalityfunc() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.addTypeEqualityFunc"]], "assertalmostequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertAlmostEqual"]], "assertcountequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertCountEqual"]], "assertdictcontainssubset() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertDictContainsSubset"]], "assertequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertEqual"]], "assertfalse() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertFalse"]], "assertgreater() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertGreater"]], "assertgreaterequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertGreaterEqual"]], "assertin() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIn"]], "assertis() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIs"]], "assertisinstance() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIsInstance"]], "assertisnone() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIsNone"]], "assertisnot() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIsNot"]], "assertisnotnone() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertIsNotNone"]], "assertless() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertLess"]], "assertlessequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertLessEqual"]], "assertlistequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertListEqual"]], "assertlogs() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertLogs"]], "assertmultilineequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertMultiLineEqual"]], "assertnologs() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNoLogs"]], "assertnotalmostequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNotAlmostEqual"]], "assertnotequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNotEqual"]], "assertnotin() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNotIn"]], "assertnotisinstance() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNotIsInstance"]], "assertnotregex() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertNotRegex"]], "assertraises() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertRaises"]], "assertraisesregex() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertRaisesRegex"]], "assertregex() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertRegex"]], "assertsequenceequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertSequenceEqual"]], "assertsetequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertSetEqual"]], "asserttrue() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertTrue"]], "asserttupleequal() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertTupleEqual"]], "assertwarns() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertWarns"]], "assertwarnsregex() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.assertWarnsRegex"]], "debug() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.debug"]], "doclasscleanups() (tests.test_unit.test_df class method)": [[25, "tests.test_unit.test_df.doClassCleanups"]], "docleanups() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.doCleanups"]], "enterclasscontext() (tests.test_unit.test_df class method)": [[25, "tests.test_unit.test_df.enterClassContext"]], "entercontext() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.enterContext"]], "fail() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.fail"]], "failureexception (tests.test_unit.test_df attribute)": [[25, "tests.test_unit.test_df.failureException"]], "setup() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.setUp"]], "setupclass() (tests.test_unit.test_df class method)": [[25, "tests.test_unit.test_df.setUpClass"]], "shortdescription() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.shortDescription"]], "skiptest() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.skipTest"]], "subtest() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.subTest"]], "teardown() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.tearDown"]], "teardownclass() (tests.test_unit.test_df class method)": [[25, "tests.test_unit.test_df.tearDownClass"]], "test_df (class in tests.test_unit)": [[25, "tests.test_unit.test_df"]], "test_idealstruct() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.test_idealstruct"]], "test_instancecheck() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.test_instancecheck"]], "test_teststruct() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.test_teststruct"]], "test_trainideal_length() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.test_trainideal_length"]], "test_trainstruct() (tests.test_unit.test_df method)": [[25, "tests.test_unit.test_df.test_trainstruct"]], "__init__() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.__init__"]], "addclasscleanup() (tests.test_unit.test_sqlite class method)": [[26, "tests.test_unit.test_sqlite.addClassCleanup"]], "addcleanup() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.addCleanup"]], "addtypeequalityfunc() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.addTypeEqualityFunc"]], "assertalmostequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertAlmostEqual"]], "assertcountequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertCountEqual"]], "assertdictcontainssubset() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertDictContainsSubset"]], "assertequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertEqual"]], "assertfalse() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertFalse"]], "assertgreater() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertGreater"]], "assertgreaterequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertGreaterEqual"]], "assertin() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIn"]], "assertis() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIs"]], "assertisinstance() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIsInstance"]], "assertisnone() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIsNone"]], "assertisnot() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIsNot"]], "assertisnotnone() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertIsNotNone"]], "assertless() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertLess"]], "assertlessequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertLessEqual"]], "assertlistequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertListEqual"]], "assertlogs() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertLogs"]], "assertmultilineequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertMultiLineEqual"]], "assertnologs() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNoLogs"]], "assertnotalmostequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNotAlmostEqual"]], "assertnotequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNotEqual"]], "assertnotin() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNotIn"]], "assertnotisinstance() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNotIsInstance"]], "assertnotregex() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertNotRegex"]], "assertraises() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertRaises"]], "assertraisesregex() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertRaisesRegex"]], "assertregex() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertRegex"]], "assertsequenceequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertSequenceEqual"]], "assertsetequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertSetEqual"]], "asserttrue() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertTrue"]], "asserttupleequal() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertTupleEqual"]], "assertwarns() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertWarns"]], "assertwarnsregex() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.assertWarnsRegex"]], "debug() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.debug"]], "doclasscleanups() (tests.test_unit.test_sqlite class method)": [[26, "tests.test_unit.test_sqlite.doClassCleanups"]], "docleanups() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.doCleanups"]], "enterclasscontext() (tests.test_unit.test_sqlite class method)": [[26, "tests.test_unit.test_sqlite.enterClassContext"]], "entercontext() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.enterContext"]], "fail() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.fail"]], "failureexception (tests.test_unit.test_sqlite attribute)": [[26, "tests.test_unit.test_sqlite.failureException"]], "setup() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.setUp"]], "setupclass() (tests.test_unit.test_sqlite class method)": [[26, "tests.test_unit.test_sqlite.setUpClass"]], "shortdescription() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.shortDescription"]], "skiptest() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.skipTest"]], "subtest() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.subTest"]], "teardown() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.tearDown"]], "teardownclass() (tests.test_unit.test_sqlite class method)": [[26, "tests.test_unit.test_sqlite.tearDownClass"]], "test_creation() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.test_creation"]], "test_sqlite (class in tests.test_unit)": [[26, "tests.test_unit.test_sqlite"]], "test_table_from_csv() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.test_table_from_csv"]], "test_table_from_pandas() (tests.test_unit.test_sqlite method)": [[26, "tests.test_unit.test_sqlite.test_table_from_pandas"]]}})